template_code = """
#include <stdlib.h>


int main() {
    char $$char$$ = {[1]};

    if ($$char$$ != $$char_ans$$)
        return 1;

    short $$short$$ = {[2]};

    if ($$short$$ != $$short_ans$$)
        return 1;

    int $$int$$ = {[3]};

    if ($$int$$ != $$int_ans$$)
        return 1;

    long long $$ll$$ = {[4]};

    if ($$ll$$ != $$ll_ans$$)
        return 1;

    unsigned int $$u_int$$ = {[5]};

    if ($$u_int$$ > $$u_int_ans$$)
        return 1;

    double $$double_1$$ = {[6]};

    if (abs($$double_1$$ - $$double_1_ans$$) >= 0.000001)
        return 1;

    double $$double_2$$ = {[7]};

    if (abs($$double_2$$ - $$double_2_ans$$) >= 0.000001)
        return 1;
    
    return 0;
}
"""

template_coderunner = '''
import subprocess, sys, re

def check_student_answer_for_substring(student_answers,substring):
    for answer in student_answers:
        print(f"You answer has {substring} in this answer", answer)
        return -1
    else:
        return 0

def find_substrings(text, substrings): 
    pattern = re.compile('|'.join(map(re.escape, substrings)))
    return pattern.findall(text)

student_answer = {{ STUDENT_ANSWER }}

check_student_answer_for_substring(student_answer, ';')
check_student_answer_for_substring(student_answer, 'exit')
template = {str(ind + 1): s for ind, s in enumerate(student_answer)}

code = """
$$code$$
"""


def replacer(match):
    key = match.group(1)
    return template.get(key, match.group(0))    


pattern = re.compile(r'\{\[(\d+)\]\}')
student_code = pattern.sub(replacer, code)

with open("prog.c", "w") as src:
    print(student_code, file=src)

# Compile
{% if QUESTION.parameters.cflags is defined %}
cflags = """{{ QUESTION.parameters.cflags | e('py') }}"""
{% else %}
cflags = "-std=c99 -Wall -Werror"
{% endif %}

return_code = subprocess.call("gcc {0} -o prog prog.c".format(cflags).split())

if return_code != 0:
    print("** Compilation failed. Testing aborted **", file=sys.stderr)

if return_code == 0:
    try:
        output = subprocess.check_output(["./prog"], universal_newlines=True)
        print('Ok')
    except subprocess.CalledProcessError as e:
        if e.returncode > 0:
            if e.output:
                print(e.output)
        else:
            if e.output:
                print(e.output, file=sys.stderr)
            if e.returncode < 0:
                print("Task failed with signal", -e.returncode, file=sys.stderr)
            print("** Further testing aborted **", file=sys.stderr)
'''

template_condition = "Заполните пропущенные значения переменных таким образом, чтобы программа завершалась с кодом 0."