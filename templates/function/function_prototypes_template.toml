template_code = """

/*
 * Это прототип функции — своего рода чертёж,
 * описывающий функцию, которая будет реализована позже.
 * Он позволяет вызывать функции до их фактической реализации в коде.
 *
 * Обычно прототипы функций размещают в заголовочных файлах ('.h'),
 * которые подключаются с помощью директивы #include в тех файлах,
 * где функции используются.
 *
 * В прототипе функции не обязательно указывать имена аргументов - 
 * достаточно указать их типы.
 * Имена можно добавлять для повышения читаемости, 
 * но это остаётся на усмотрение программиста.
 *
 * Прототипы позволяют компилятору проверить типы аргументов
 * и возвращаемого значения при вызове функции.
 */

int function_prototype(int, int);

int main() {
    
    /*
    * Проверка работы функции по её прототипу
    * Функция должна вернуть ожидаемую сумму двух чисел
    */
    if (function_prototype($$number_one$$, $$number_two$$) != {[1]}) {
        return 1;
    }

    return 0;
}

/*
 * Реализация функции, объявленной ранее через прототип
 * Функция выполняет сложение двух целых чисел
 */
int function_prototype(int i, int j) { return i + j; }

"""

template_condition = "Заполните пропущенные значения переменных таким образом, чтобы программа завершалась с кодом 0."

ban_words = ["exit", ";", "return", "["]

[[error_messages]]
"1" = "Функция вернула неверный результат сложения"
"2" = "Некорректные аргументы при вызове функции"
"3" = "Ошибка при работе с прототипом функции"