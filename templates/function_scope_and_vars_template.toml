
template_code = """

static int static_function(int);

int global_var = $$global_val$$;

int modify_global()
{
    /*
    * Мы изменяем глобальную переменную, которая видна всей программе.
    */
    global_var += $$global_plus$$;
    return global_var;
}

int modify_local()
{
    /*
    * Мы изменяем локальную переменную, которая размещается и инициализируется в стеке.
    * При каждом вызове функции она заново инициализируется и изменяется одинаково.
    */
    int i = $$local_val$$;
    i += $$local_plus$$;
    return i;
}

int modify_local_static()
{
    /*
    * Локальные static переменные инициализируются только один раз
    * Они доступны только внутри той функции, в которой объявлены,
    * поскольку их имя известно лишь в пределах этой функции.
    * Это позволяет сохранять значение переменной между вызовами функции.
    *
    * Ключевое слово static имеет двойное значение в зависимости от области видимости.
    * В следующей функции это будет показано.
    */
    static int i = $$static_val$$;
    i += $$static_plus$$;
    static_function(0);
    return i;
}

int main() {
    /*
    * Функции являются основной областью видимости в языке C.
    * Местоположение (область действия) переменных определяется тем, где они объявлены
    * относительно функций.
    *
    * Мы рассмотрим три типа переменных: глобальные, локальные и локальные static,
    * используя три функции.
    */

    modify_global();
    modify_global();
    
    if (modify_global() != {[1]}) {
        return 1;
    }

    modify_local();
    modify_local();

    if (modify_local() != {[2]}) {
        return 2;
    }

    modify_local_static();
    modify_local_static();
    
    if (modify_local_static() != {[3]}) {
        return 3;
    }

    return 0;
}

/*
* Ключевое слово static, использованное на уровне файла (вне функций),
* делает переменную или функцию видимой только внутри этого файла.
*/

static int static_int = $$static_val_func$$;

static int static_function(int n)
{
    static_int += $$static_plus_func$$;
    if (n == 0)
        return 0;
    else
        return static_int + static_function(n - 1);
}
"""






template_coderunner = '''
import subprocess, sys, re
def find_substrings(text, substrings): 
    pattern = re.compile('|'.join(map(re.escape, substrings)))
    return pattern.findall(text)
def check_student_answers_for_substrings(student_answers,substrings):
    for answer in student_answers:
        found_substring = find_substrings(answer, substrings)
        if found_substring:
            print(f"Your answer has {set(found_substring)} in this answer", answer)
            sys.exit()
def replacer(match):
    key = match.group(1)
    return template.get(key, match.group(0))
student_answer = {{ STUDENT_ANSWER }}
banned_words = ['exit', ';', 'return', 'global_var', 'i', '(']
check_student_answers_for_substrings(student_answer, banned_words)
template = {str(ind + 1): s for ind, s in enumerate(student_answer)}
code = """
$$code$$
"""
pattern = re.compile(r'\{\[(\d+)\]\}')
student_code = pattern.sub(replacer, code)
with open("prog.c", "w") as src:
    print(student_code, file=src)
# Compile
{% if QUESTION.parameters.cflags is defined %}
cflags = """{{ QUESTION.parameters.cflags | e('py') }}"""
{% else %}
cflags = "-std=c99 -Wall -Werror"
{% endif %}
return_code = subprocess.call("gcc {0} -o prog prog.c".format(cflags).split())
if return_code != 0:
    sys.exit()
try:
    output = subprocess.check_output(["./prog"], universal_newlines=True)
    print('Ok')
except subprocess.CalledProcessError as e:
    if e.returncode > 0:
        print(f'Программа завершилась с кодом {e.returncode}, а ожидался код 0.')
    else:
        if e.output:
            print(e.output, file=sys.stderr)
'''

template_condition = "Заполните пропущенные значения переменных таким образом, чтобы программа завершалась с кодом 0."
