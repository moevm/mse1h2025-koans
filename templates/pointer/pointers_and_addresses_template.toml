template_code = """

/*
 * Указатели — это визитная карточка языка C и одна из самых сложных концепций
 * для программистов, привыкших к языкам, где указатели не используются явно.
 *
 * Указатель - это переменная, которая хранит адрес другой переменной в памяти.
 * Размер указателя зависит от архитектуры системы (обычно 4 или 8 байт).
 */

int main() {
    int i = $$int_val$$;
    int j = $$another_int_val$$;
    int *iptr = &i;
    int *jptr = &j;

    /* Синтаксис объявления указателя: имя типа, за которым следует '*',
     * расположенное между именем типа и именем переменной.
     *
     * Оператор '&' возвращает адрес переменной.
     *
     * Важно: тип указателя должен соответствовать типу переменной,
     * на которую он указывает.
     */

    /* Оператор '*' при использовании не в объявлении служит для разыменования
     * указателя, т.е. получения значения по адресу.
     */

    // Проверка размера целочисленной переменной
    if (sizeof(i) != {[1]}) {
        return 1;
    }
    
    // Проверка размера указателя (зависит от архитектуры)
    if (sizeof(iptr) != {[2]}) {
        return 2;
    }
    
    // Проверка значения через указатель
    if (*jptr != {[3]}) {
        return 3;
    }

    /*
     * Объявление нескольких переменных, смешивающее указатели и обычные типы,
     * может быть сложным для понимания в зависимости от позиции '*'.
     * Звездочка относится к конкретной переменной, а не к типу.
     */

    int k, *l;  // k - int, l - указатель на int
    int* m, n;  // m - указатель на int, n - обычный int
    
    // Проверка размера обычной переменной int
    if (sizeof(k) != {[4]}) {
        return 4;
    }
    
    // Проверка размера указателя
    if (sizeof(l) != {[5]}) {
        return 5;
    }
    
    // Проверка размера указателя (альтернативный синтаксис объявления)
    if (sizeof(m) != {[6]}) {
        return 6;
    }
    
    // Проверка размера обычной переменной int (в смешанном объявлении)
    if (sizeof(n) != {[7]}) {
        return 7;
    }
    
    return 0;
}
"""

template_condition = "Заполните пропущенные значения, чтобы программа завершилась с кодом 0. Учтите: размер int обычно 4 байта."

ban_words = ["exit", "return", "[", "goto", "malloc"]

[[error_messages]]
"1" = "Некорректный размер переменной типа int"
"2" = "Некорректный размер указателя на int"
"3" = "Неверное значение при разыменовании указателя jptr"
"4" = "Неправильный размер переменной k (ожидается размер int)"
"5" = "Неправильный размер указателя l"
"6" = "Неправильный размер указателя m"
"7" = "Неправильный размер переменной n (ожидается размер int)"