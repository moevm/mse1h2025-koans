template_code = """

/*
 * Поскольку функции в C используют передачу параметров по значению,
 * невозможно изменить значение аргумента внутри функции напрямую.
 * Здесь на помощь приходят указатели.
 *
 * Ключевые моменты:
 * 1. Для изменения переменной передаем указатель на нее
 * 2. В функции используем оператор * для доступа к значению
 * 3. Изменения сохраняются после вызова функции
 */

void multiply(int *ptr) {
    /* 
     * ptr - указатель на целое число
     * *ptr - разыменование указателя (доступ к значению)
     * Операция *= изменяет значение по указателю
     */
    *ptr *= $$multiplier$$;
}

int main() {
    int i = $$initial_val$$;
    
    /*
     * Передаем адрес переменной i в функцию
     * Функция сможет изменить значение i через указатель
     */
    multiply(&i);
    
    // Проверка результата изменения переменной
    if (i != {[1]}) {
        return 1;
    }
    return 0;
}
"""

template_condition = "Заполните пропущенные значения так, чтобы программа завершилась с кодом 0."

ban_words = ["exit", "return", "[", "goto", "malloc", "free"]

[[error_messages]]
"1" = "Неверный результат умножения - значение переменной не изменилось как ожидалось"
"2" = "Ошибка работы с указателем - возможно передали неверный адрес"
"3" = "Некорректное начальное значение переменной"