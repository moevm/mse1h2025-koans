template_code = """
#include <stdlib.h>

/*
 * Указатели на функции позволяют передавать функции как аргументы другим функциям.
 * Это мощный инструмент для создания гибкого и модульного кода.
 *
 * В этом примере мы используем qsort - стандартную функцию сортировки,
 * которая принимает указатель на функцию сравнения в качестве аргумента.
 */

/*
 * Функция сравнения для qsort:
 * - Принимает два const void* указателя (стандартный формат для qsort)
 * - Приводит их к int* и разыменовывает
 * - Возвращает:
 *   * отрицательное число, если a < b
 *   * 0, если a == b
 *   * положительное число, если a > b
 */
int compare(const void *a, const void *b) {
    return (*(int*)a - *(int*)b);
}

int main() {
    // Инициализация массива с неупорядоченными значениями
    int arr[3] = { $$val3$$, $$val1$$, $$val2$$ };
    
    /*
     * Сортировка массива с помощью qsort:
     * 1. arr - указатель на массив
     * 2. 3 - количество элементов
     * 3. sizeof(int) - размер каждого элемента
     * 4. compare - указатель на функцию сравнения
     */
    qsort(arr, 3, sizeof(int), compare);
    
    // Проверка правильности сортировки (по возрастанию)
    if (arr[0] != {[1]}) {
        return 1;  // Первый элемент после сортировки неверный
    }
    if (arr[1] != {[2]}) {
        return 2;  // Второй элемент после сортировки неверный
    }
    if (arr[2] != {[3]}) {
        return 3;  // Третий элемент после сортировки неверный
    }
    return 0;
}
"""

template_condition = "Заполните пропущенные значения так, чтобы программа завершилась с кодом 0."

ban_words = ["exit", "return", "[", "goto", "malloc", "free"]

[[error_messages]]
"1" = "Неверный первый элемент после сортировки (ожидалось минимальное значение)"
"2" = "Неверный второй элемент после сортировки (ожидалось среднее значение)"
"3" = "Неверный третий элемент после сортировки (ожидалось максимальное значение)"
"4" = "Ошибка в функции сравнения - нарушен порядок сортировки"