template_code = """
int main() {
    int i = $$int_val$$;
    int j = $$another_int_val$$;
    int *iptr = &i;
    int *jptr = &j;

    if (sizeof(i) != {[1]}) {
        return 1;
    }
    if (sizeof(iptr) != {[2]}) {
        return 2;
    }
    if (*jptr != {[3]}) {
        return 3;
    }
    return 0;
}
"""

template_coderunner = '''
import subprocess, sys, re


def find_substrings(text, substrings):
    pattern = re.compile('|'.join(map(re.escape, substrings)))
    return pattern.findall(text)


def check_student_answers_for_substrings(student_answers,substrings):
    for answer in student_answers:
        found_substring = find_substrings(answer, substrings)
        if found_substring:
            print(f"Your answer has {set(found_substring)} in this answer", answer)
            sys.exit()


def replacer(match):
    key = match.group(1)
    return template.get(key, match.group(0))


student_answer = {{ STUDENT_ANSWER }}

banned_words = ['exit', ';', 'return', '(']
check_student_answers_for_substrings(student_answer, banned_words)

template = {str(ind + 1): s for ind, s in enumerate(student_answer)}

code = """
$$code$$
"""

pattern = re.compile(r'\{\[(\d+)\]\}')
student_code = pattern.sub(replacer, code)

with open("prog.c", "w") as src:
    print(student_code, file=src)

# Compile
{% if QUESTION.parameters.cflags is defined %}
cflags = """{{ QUESTION.parameters.cflags | e('py') }}"""
{% else %}
cflags = "-std=c99 -Wall -Werror"
{% endif %}

return_code = subprocess.call("gcc {0} -o prog prog.c".format(cflags).split())

if return_code != 0:
    sys.exit()

try:
    output = subprocess.check_output(["./prog"], universal_newlines=True)
    print('Ok')
except subprocess.CalledProcessError as e:
    if e.returncode > 0:
        print(f'Программа завершилась с кодом {e.returncode}, а ожидался код 0.')
    else:
        if e.output:
            print(e.output, file=sys.stderr)
'''

template_condition = "Заполните пропущенные значения, чтобы программа завершилась с кодом 0. Определите размеры переменных и значение, на которое указывает jptr."